generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(uuid())
  username        String           @unique @db.VarChar(50)
  email           String           @unique @db.VarChar(100)
  password        String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  age             Int
  gender          Gender
  role            Role             @default(USER)
  nationality     String
  activityLog     ActivityLog[]
  providerProfile ProviderProfile?
  country         Country          @relation(fields: [nationality], references: [id])
  symptomLogs     UserSymptomLog[]
}

model Symptom {
  id                 String             @id @default(uuid())
  name               String             @unique @db.VarChar(50)
  description        String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  userSymptomEntries UserSymptomEntry[]
}

model UserSymptomLog {
  id                 String             @id @default(uuid())
  userId             String
  locationId         String
  recordedAt         DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  userSymptomEntries UserSymptomEntry[]
  location           Location           @relation(fields: [locationId], references: [id])
  user               User               @relation(fields: [userId], references: [id])
}

model UserSymptomEntry {
  logId        String
  symptomId    String
  severity     Int?
  symptomStart DateTime?
  symptomEnd   DateTime?
  description  String?
  log          UserSymptomLog @relation(fields: [logId], references: [id], onDelete: Cascade)
  symptom      Symptom        @relation(fields: [symptomId], references: [id])

  @@id([logId, symptomId])
}

model Location {
  id              String            @id @default(uuid())
  city            String            @db.VarChar(100)
  state           String?           @db.VarChar(100)
  latitude        Float
  longitude       Float
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  countryId       String
  activityLog     ActivityLog[]
  country         Country           @relation(fields: [countryId], references: [id])
  providerProfile ProviderProfile[]
  symptomLogs     UserSymptomLog[]

  @@unique([city, state, countryId])
  @@unique([latitude, longitude])
}

model Country {
  id        String     @id @default(uuid())
  name      String     @unique @db.VarChar(100)
  alpha2    String     @unique @db.VarChar(2)
  active    Boolean    @default(true)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  locations Location[]
  users     User[]

  @@index([alpha2])
}

model ProviderProfile {
  id         String   @id @default(uuid())
  providerId String   @unique
  specialty  String   @db.VarChar(50)
  locationId String
  title      String?  @db.VarChar(50)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  firstName  String   @db.VarChar(50)
  lastName   String   @db.VarChar(50)
  location   Location @relation(fields: [locationId], references: [id])
  provider   User     @relation(fields: [providerId], references: [id])
}

model ActivityLog {
  id         String    @id @default(uuid())
  userId     String
  role       String    @db.VarChar(50)
  ipAddress  String?   @db.VarChar(50)
  locationId String?
  recordedAt DateTime  @default(now())
  endpoint   String    @db.VarChar(100)
  method     String    @db.VarChar(10)
  location   Location? @relation(fields: [locationId], references: [id])
  user       User      @relation(fields: [userId], references: [id])
}

enum Role {
  ADMIN
  PROVIDER
  USER
}

enum Gender {
  MALE
  FEMALE
  OTHER
}
