// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  PROVIDER
  USER
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique @db.VarChar(50)
  email     String   @unique @db.VarChar(100)
  firstName String   @db.VarChar(50)
  lastName  String   @db.VarChar(50)
  dob       DateTime
  password  String
  role      String   @default("USER")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  symptomLogs     SymptomLog[]
  providerProfile ProviderProfile[]
  activityLog     ActivityLog[]
}

model Symptom {
  id          String   @id @default(uuid())
  name        String   @unique @db.VarChar(50)
  description String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  symptomLogs SymptomLog[]
}

model SymptomLog {
  id           String    @id @default(uuid())
  userId       String
  symptomId    String
  locationId   String
  severity     Int?
  symptomStart DateTime?
  symptomEnd   DateTime?
  description  String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  user     User     @relation(fields: [userId], references: [id])
  symptom  Symptom  @relation(fields: [symptomId], references: [id])
  location Location @relation(fields: [locationId], references: [id])
}

model Location {
  id           String  @id @default(uuid())
  city         String  @unique @db.VarChar(50)
  state        String? @db.VarChar(50)
  country      String? @db.VarChar(50)
  postalCode   String? @db.VarChar(50)
  addressLine1 String? @db.VarChar(100)
  addressLine2 String? @db.VarChar(100)
  latitude     Float?
  longitude    Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  symptomLogs     SymptomLog[]
  providerProfile ProviderProfile[]
  activityLog     ActivityLog[]
}

model ProviderProfile {
  id         String   @id @default(uuid())
  providerId String
  specialty  String   @db.VarChar(50)
  locationId String
  title      String?  @db.VarChar(50)
  phone      String?  @db.VarChar(20)
  bio        String?  @db.Text
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  provider User     @relation(fields: [providerId], references: [id])
  location Location @relation(fields: [locationId], references: [id])
}

model ActivityLog {
  id         String   @id @default(uuid())
  userId     String
  action     String   @db.VarChar(50)
  role       String   @db.VarChar(50)
  ipAddress  String?  @db.VarChar(50)
  locationId String?
  recordedAt DateTime @default(now())

  user     User      @relation(fields: [userId], references: [id])
  location Location? @relation(fields: [locationId], references: [id])
}
