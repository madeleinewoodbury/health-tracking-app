// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  PROVIDER
  USER
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model User {
  id       String @id @default(uuid())
  username String @unique @db.VarChar(50)
  email    String @unique @db.VarChar(100)
  password String
  role     Role   @default(USER)

  age         Int
  gender      Gender
  nationality String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  country         Country           @relation(fields: [nationality], references: [id])
  symptomLogs     UserSymptomLog[]
  providerProfile ProviderProfile[]
  activityLog     ActivityLog[]
}

model Symptom {
  id          String   @id @default(uuid())
  name        String   @unique @db.VarChar(50)
  description String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userSymptomEntries UserSymptomEntry[]
}

model UserSymptomLog {
  id         String   @id @default(uuid())
  userId     String
  locationId String
  recordedAt DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user               User               @relation(fields: [userId], references: [id])
  location           Location           @relation(fields: [locationId], references: [id])
  userSymptomEntries UserSymptomEntry[]
}

model UserSymptomEntry {
  logId        String
  symptomId    String
  severity     Int?
  symptomStart DateTime?
  symptomEnd   DateTime?
  description  String?

  symptom Symptom        @relation(fields: [symptomId], references: [id])
  log     UserSymptomLog @relation(fields: [logId], references: [id], onDelete: Cascade)

  @@id([logId, symptomId])
}

model Location {
  id        String  @id @default(uuid())
  city      String  @db.VarChar(100)
  state     String? @db.VarChar(100)
  countryId String

  latitude  Float
  longitude Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  country         Country           @relation(fields: [countryId], references: [id])
  symptomLogs     UserSymptomLog[]
  providerProfile ProviderProfile[]
  activityLog     ActivityLog[]

  @@unique([city, state, countryId])
  @@unique([latitude, longitude])
}

model Country {
  id     String  @id @default(uuid())
  name   String  @unique @db.VarChar(100)
  alpha2 String  @unique @db.VarChar(2) // ISO 3166-1 alpha-2
  active Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  locations Location[]
  users     User[]

  @@index([alpha2])
}

model ProviderProfile {
  id         String  @id @default(uuid())
  providerId String
  firstName  String  @db.VarChar(50)
  lastName   String  @db.VarChar(50)
  specialty  String  @db.VarChar(50)
  locationId String
  title      String? @db.VarChar(50)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  provider User     @relation(fields: [providerId], references: [id])
  location Location @relation(fields: [locationId], references: [id])
}

model ActivityLog {
  id         String   @id @default(uuid())
  userId     String
  action     String   @db.VarChar(50)
  role       String   @db.VarChar(50)
  ipAddress  String?  @db.VarChar(50)
  locationId String?
  recordedAt DateTime @default(now())

  user     User      @relation(fields: [userId], references: [id])
  location Location? @relation(fields: [locationId], references: [id])
}
